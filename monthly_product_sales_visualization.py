# -*- coding: utf-8 -*-
"""Monthly Product Sales Visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dd3lBx75DgZOEU4-rRywvKxkRlu2-hlH
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/Sales_April_2019.csv')
df=pd.read_csv('/content/Sales_December_2019.csv')

display(df.head())

from matplotlib import pyplot as plt
import seaborn as sns
_df_1.groupby('Product').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
import seaborn as sns
_df_3.groupby('Price Each').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
import seaborn as sns
_df_2.groupby('Quantity Ordered').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

display(df.tail())

from matplotlib import pyplot as plt
import seaborn as sns
import pandas as pd
plt.subplots(figsize=(8, 8))
df_2dhist = pd.DataFrame({
    x_label: grp['Order Date'].value_counts()
    for x_label, grp in _df_23.groupby('Price Each')
})
sns.heatmap(df_2dhist, cmap='viridis')
plt.xlabel('Price Each')
_ = plt.ylabel('Order Date')

import pandas as pd
import altair as alt

df_december = pd.read_csv('Sales_December_2019.csv')
df_april = pd.read_csv('Sales_April_2019.csv')

df = pd.concat([df_december, df_april], ignore_index=True)

df = df[df['Order ID'] != 'Order ID']

df['Quantity Ordered'] = pd.to_numeric(df['Quantity Ordered'])
df['Price Each'] = pd.to_numeric(df['Price Each'])

df['Total Sales'] = df['Quantity Ordered'] * df['Price Each']
product_sales = df.groupby('Product')['Total Sales'].sum().sort_values(ascending=False)

product_sales_df = product_sales.reset_index()

chart = alt.Chart(product_sales_df).mark_bar().encode(
    x=alt.X('Product', sort='-y', title='Product'),
    y=alt.Y('Total Sales', title='Total Sales')
).properties(
    title='Total Sales by Product'
).interactive()
plt.plot(product_sales)
plt.xlabel('Product')
plt.ylabel('Total Sales')
plt.title('Total Sales by Product')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df_december = pd.read_csv('Sales_December_2019.csv')
df_april = pd.read_csv('Sales_April_2019.csv')

df = pd.concat([df_december, df_april], ignore_index=True)

df_cleaned = df[df['Order ID'] != 'Order ID'].copy()

df_cleaned['Quantity Ordered'] = pd.to_numeric(df_cleaned['Quantity Ordered'])
df_cleaned['Price Each'] = pd.to_numeric(df_cleaned['Price Each'])

df_cleaned['Sales'] = df_cleaned['Quantity Ordered'] * df_cleaned['Price Each']
product_sales = df_cleaned.groupby('Product')['Sales'].sum().sort_values(ascending=False)

plt.figure(figsize=(12, 8))
sns.barplot(x=product_sales.values, y=product_sales.index, palette='viridis')
plt.xlabel('Sales')
plt.ylabel('Product')
plt.title('Total Sales by Product (April and December 2019)')
plt.show()

import pandas as pd
import altair as alt
import matplotlib.pyplot as plt
from IPython.display import display

df_december = pd.read_csv('Sales_December_2019.csv')
df_april = pd.read_csv('Sales_April_2019.csv')

df = pd.concat([df_december, df_april], ignore_index=True)

df = df[df['Order ID'] != 'Order ID']

df['Quantity Ordered'] = pd.to_numeric(df['Quantity Ordered'])
df['Price Each'] = pd.to_numeric(df['Price Each'])

df['Order Date'] = pd.to_datetime(df['Order Date'], format='%m/%d/%y %H:%M')

df['Month'] = df['Order Date'].dt.to_period('M')

df['Total Sales'] = df['Quantity Ordered'] * df['Price Each']

monthly_revenue = df.groupby('Month')['Total Sales'].sum().reset_index()

monthly_revenue['Month'] = monthly_revenue['Month'].dt.to_timestamp()

line_chart = alt.Chart(monthly_revenue).mark_line(point=True).encode(
    x=alt.X('Month', type='temporal', title='Month'),
    y=alt.Y('Total Sales', title='Total Revenue'),
    tooltip=[alt.Tooltip('Month', format='%Y-%m'), 'Total Sales']
).properties(
    title='Monthly Revenue Trends'
).interactive()

display(line_chart)

import pandas as pd
import altair as alt
from IPython.display import display

df_december = pd.read_csv('Sales_December_2019.csv')
df_april = pd.read_csv('Sales_April_2019.csv')

df = pd.concat([df_december, df_april], ignore_index=True)

df = df[df['Order ID'] != 'Order ID']
df['Quantity Ordered'] = pd.to_numeric(df['Quantity Ordered'])
df['Price Each'] = pd.to_numeric(df['Price Each'])
df['Total Sales'] = df['Quantity Ordered'] * df['Price Each']
product_sales = df.groupby('Product')['Total Sales'].sum().sort_values(ascending=False)

product_sales_df = product_sales.reset_index()

base = alt.Chart(product_sales_df).encode(
    theta=alt.Theta("Total Sales", stack=True)
)

outerRadius = 120
innerRadius = 0

pie = base.mark_arc(outerRadius=outerRadius, innerRadius=innerRadius).encode(
    color=alt.Color("Product", title="Product"),
    order=alt.Order("Total Sales", sort="descending"),
    tooltip=["Product", alt.Tooltip("Total Sales", format="$.2f")],
)

# Create the text labels for the pie chart
text = base.mark_text(radius=outerRadius + 20).encode(
    text=alt.Text("Total Sales", format="$.2s"),
    order=alt.Order("Total Sales", sort="descending"),
    color=alt.value("black"),
)

chart = pie + text

chart = chart.properties(
    title='Product Category Contribution to Total Sales'
)

chart.save('product_category_contribution_pie_chart.json')

display(chart)